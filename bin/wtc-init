const fs = require('fs');
const wpk = require('../package.json');
const program = require('commander');
const download = require('download-git-repo');
const handlebars = require('handlebars');
const inquirer = require('inquirer');
const ora = require('ora');
const chalk = require('chalk');
const symbols = require('log-symbols');

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')


program.on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # create a new project with an official template'))
    console.log('    $ wtc init webpack my-project')
    console.log()
    console.log(chalk.gray('    # create a new project straight from a github template'))
    console.log('    $ wtc init username/repo my-project')
    console.log()
  })

program.command('gulp <name>')
  .action((name) => {
      if(!fs.existsSync(name)){
          inquirer.prompt([
               {
                   name: 'name',
                   message: `请输入项目名称<${name}>`
               },
               {
                   name: 'description',
                   message: '请输入项目描述'
               },
               {
                   name: 'author',
                   message: '请输入作者名称'
               }
          ]).then((answers) => {

            const spinner = ora('正在下载模板...');
            spinner.start();
            download('github:https://github.com:tcly861204/gulp#master', name, {clone: true}, (err) => {
                if(err){
                    spinner.fail();
                    console.log(symbols.error, chalk.red(err));
                }else{
                    spinner.succeed();
                    const fileName = `${name}/package.json`;
                    const meta = {
                        "name": name,
                        "description": answers.description,
                        "author": answers.author
                    }
                    if(fs.existsSync(fileName)){
                        const content = fs.readFileSync(fileName).toString();
                        const result = handlebars.compile(content)(meta);
                        fs.writeFileSync(fileName, result);
                    }
                    console.log(symbols.success, chalk.green('项目初始化完成'));
                }
            })
          }).catch((err) => {

          });
      } else {
          // 错误提示项目已存在，避免覆盖原有项目
          console.log(symbols.error, chalk.red('项目已存在'));
      }
  });

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help();